#!/usr/bin/ruby

# Setup logging for Rails (mostly use rails 3)
if ENV.include?('RAILS_ENV')
  if !Object.const_defined?('RAILS_DEFAULT_LOGGER')
    require 'logger'
    Object.const_set('RAILS_DEFAULT_LOGGER', Logger.new(STDOUT))
  end

  def sql(query)
    ActiveRecord::Base.connection.select_all(query)
  end
  
  if ENV['RAILS_ENV'] == 'test'
    require 'spec/spec_helper'
  end

# for rails 3
elsif defined?(Rails) && !Rails.env.nil? && defined?(ActiveRecord)
  if Rails.logger
    Rails.logger =Logger.new(STDOUT)
    ActiveRecord::Base.logger = Rails.logger
    ActiveRecord::Base.clear_active_connections!
  end
  if Rails.env == 'test'
    require 'spec/spec_helper'
  end
else
  # nothing to do
end

# Spit out columns based on AR or Mongoid
if defined?(ActiveRecord)
  # annotate column names of an AR model
  def show(obj)
    y(obj.send("column_names"))
  end
elsif defined?(Mongoid)
  # annotate column names of a Mongoid model
  def show(obj)
    fields = obj.send("fields").keys
    #Source.fields["slug"].type.to_s
    fields.each do |field|
      puts "#{ANSI[:MAGENTA]}#{field.to_sym}#{ANSI[:RESET]} => #{ANSI[:LGRAY]}#{obj.send("fields")[field].type.to_s}#{ANSI[:RESET]}\n"
    end
    nil
  end
end


def rvm_exists?
  `which rvm`
  $?.success?
end

if rvm_exists?
  version = %x[rvm-prompt]
  puts "#{ANSI[:WHITE]}~> RVM:#{ANSI[:RESET]} #{ANSI[:GREEN]}#{version.strip}#{ANSI[:RESET]}#{ANSI[:RESET]}"
end
puts "#{ANSI[:WHITE]}~> Loaded:#{ANSI[:RESET]} #{ANSI[:GREEN]}.railsrc#{ANSI[:RESET]}#{ANSI[:RESET]}"